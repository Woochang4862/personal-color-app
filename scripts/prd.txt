# Personal Color Analysis Web Application PRD

## Project Overview
Convert a Python-based personal color analysis application to a client-side JavaScript implementation that directly interacts with the OpenAI API.

## Core Requirements

1. Client-Side Implementation
   - Remove server-side dependencies (Python/FastAPI)
   - Implement all functionality in JavaScript
   - Direct OpenAI API integration from the frontend

2. API Integration
   - Secure API key management using environment variables
   - Proper error handling for API calls
   - Implement rate limiting and error recovery

3. Color Analysis Features
   - Image processing and analysis using OpenAI's Vision API
   - Personal color diagnosis based on image analysis
   - Clear presentation of analysis results

4. Environment Configuration
   - Environment variable management
   - API key security
   - Configuration file setup

## Technical Requirements

1. JavaScript Implementation
   - Modern ES module syntax
   - Proper error handling
   - Clean code structure and organization

2. Security
   - Secure API key management
   - Input validation
   - Error handling

3. User Experience
   - Clear feedback during analysis
   - Error messages when needed
   - Loading states during API calls

## Success Criteria
- Successful conversion from Python to JavaScript
- Maintained functionality of personal color analysis
- Secure API key management
- Proper error handling
- Clean, maintainable code structure

## 개요
퍼스널 컬러 진단 웹 서비스는 사용자가 웹 브라우저에서 자신의 사진을 촬영하고 AI 기반 분석을 통해 자신의 퍼스널 컬러 타입을 확인할 수 있는 서비스입니다. 이 서비스는 복잡한 회원가입이나 로그인 없이 즉시 사용할 수 있으며, 사용자에게 직관적이고 시각적인 결과를 제공합니다. 퍼스널 컬러에 대한 지식이 없는 사용자도 쉽게 자신에게 어울리는 색상을 파악할 수 있습니다.

## 핵심 기능
1. **사진 촬영 및 업로드**
   - 웹캠을 통한 실시간 사진 촬영 기능
   - 기존 이미지 파일 업로드 옵션
   - 사진 촬영/선택 가이드라인 제공

2. **퍼스널 컬러 분석**
   - 백엔드 API를 통한 이미지 전송
   - 분석 진행 중 로딩 인디케이터 표시
   - 오류 발생 시 사용자 친화적인 메시지 표시

3. **결과 시각화**
   - 사용자의 퍼스널 컬러 타입 표시 (봄웜톤, 여름쿨톤, 가을웜톤, 겨울쿨톤 등)
   - 어울리는 색상 팔레트 시각화
   - 추천 색상 및 피해야 할 색상 안내

4. **결과 공유**
   - 소셜 미디어 공유 기능
   - 결과 이미지 다운로드 옵션

## 사용자 경험
### 사용자 페르소나
- **대학생 미나**: 패션에 관심이 많고 자신에게 어울리는 색상을 알고 싶어 하는 20대 여성
- **직장인 준호**: 의류 쇼핑 시 효율적인 색상 선택을 원하는 30대 남성
- **뷰티 블로거 지은**: 콘텐츠 제작을 위해 객관적인 퍼스널 컬러 정보가 필요한 인플루언서

### 핵심 사용자 플로우
1. 랜딩 페이지 방문 -> 서비스 소개 확인
2. '진단 시작' 버튼 클릭 -> 사진 촬영/업로드 화면으로 이동
3. 사진 촬영 또는 업로드 -> 분석 요청
4. 분석 로딩 화면 표시 -> 결과 페이지로 이동
5. 퍼스널 컬러 결과 확인 -> 추천 색상 팔레트 확인
6. 결과 공유 또는 다운로드 (선택적)
7. 새로운 사진으로 재시도 옵션

### UI/UX 고려사항
- 모바일 우선 반응형 디자인
- 직관적인 인터페이스로 복잡한 설명 없이 사용 가능
- 분석 과정의 투명성 제공 (진행 상태 표시)
- 결과 페이지는 시각적으로 매력적이고 이해하기 쉽게 구성
- 밝고 깨끗한 디자인으로 사용자 신뢰 구축

## 기술 아키텍처
### 시스템 구성 요소
- **프론트엔드**: React (Vite 기반), Tailwind CSS
- **상태 관리**: React Context API
- **라우팅**: React Router
- **이미지 처리**: 웹캠 접근 및 이미지 처리 라이브러리

### 데이터 모델
- **이미지 데이터**: Binary 형식의 이미지 파일
- **분석 결과 데이터**: 
  ```json
  {
    "colorType": "Spring Warm",
    "confidence": 0.85,
    "recommendedColors": ["#FFC0CB", "#FFD700", ...],
    "avoidColors": ["#000080", "#800080", ...],
    "characteristics": ["밝고 선명한 색조가 어울림", ...]
  }
  ```

### API 및 통합
- **백엔드 API 엔드포인트**:
  - POST `/api/analyze`: 이미지 업로드 및 분석 요청
  - GET `/api/colorTypes`: 컬러 타입 정보 조회
- **외부 통합**:
  - 소셜 미디어 공유 API

### 인프라 요구사항
- 정적 웹 호스팅 (학교 서버)
- 이미지 처리 및 API 요청을 위한 HTTPS 지원
- 크로스 오리진 리소스 공유(CORS) 설정

## 개발 로드맵
### MVP 요구사항
1. 기본 랜딩 페이지 및 서비스 소개
2. 웹캠을 통한 사진 촬영 기능
3. 이미지 파일 업로드 기능
4. 백엔드 API 연동 및 이미지 전송
5. 기본적인 결과 표시 페이지
6. 모바일 및 데스크톱 호환성

### 향후 개선사항
1. 결과 페이지 UI/UX 개선 및 애니메이션 추가
2. 다양한 퍼스널 컬러 타입에 대한 상세 정보 제공
3. 사용자 피드백 수집 시스템
4. 결과 히스토리 기능 (로컬 스토리지 활용)
5. 색상 팔레트 커스터마이징 옵션
6. 오프라인 지원을 위한 PWA 구현

## 논리적 의존성 체인
1. **기초 프로젝트 설정**:
   - Vite + React + Tailwind CSS 초기 설정
   - 라우팅 및 기본 컴포넌트 구조 설정

2. **핵심 기능 개발**:
   - 랜딩 페이지 구현
   - 이미지 캡처/업로드 기능 구현
   - 백엔드 API 연동 구조 개발
   - 로딩 상태 관리 구현

3. **결과 표시 기능**:
   - 퍼스널 컬러 결과 컴포넌트 개발
   - 색상 팔레트 시각화 구현
   - 추천 색상 표시 기능

4. **UI/UX 개선**:
   - 반응형 디자인 최적화
   - 애니메이션 및 전환 효과 추가
   - 접근성 향상

5. **추가 기능 개발**:
   - 소셜 미디어 공유 기능
   - 결과 다운로드 기능
   - 히스토리 기능 (로컬 스토리지)

## 위험 및 완화 방안
### 기술적 도전
- **웹캠 접근 문제**: 모든 브라우저에서의 웹캠 접근 호환성 확인, 폴백 옵션으로 이미지 업로드 제공
- **이미지 품질**: 사용자에게 최적의 조명 조건 안내, 이미지 보정 가이드라인 제공
- **백엔드 통신 오류**: 견고한 오류 처리 및 재시도 메커니즘 구현

### MVP 결정
- **핵심 기능 집중**: 초기 버전에서는 기본적인 분석 및 결과 표시에 집중
- **단계적 출시**: 기본 기능 완성 후 점진적으로 추가 기능 구현

### 자원 제약
- **성능 최적화**: 이미지 크기 제한 및 최적화로 서버 부하 감소
- **코드 재사용**: 컴포넌트 기반 설계로 개발 효율성 향상
- **확장 가능한 설계**: 향후 기능 추가를 고려한 모듈식 아키텍처

## 부록
### 컬러 타입 정의
- **봄 웜톤 (Spring Warm)**: 밝고 선명한 색상, 노랑빛이 도는 따뜻한 색조
- **여름 쿨톤 (Summer Cool)**: 부드럽고 흐린 색상, 파랑빛이 도는 차가운 색조
- **가을 웜톤 (Fall Warm)**: 깊고 풍부한 색상, 노랑빛이 도는 따뜻한 색조
- **겨울 쿨톤 (Winter Cool)**: 선명하고 강한 색상, 파랑빛이 도는 차가운 색조

### 기술 스택 상세
- **React 18+**: 최신 기능 및 동시성 모드 활용
- **Vite**: 빠른 개발 및 빌드 성능
- **Tailwind CSS**: 유연하고 확장 가능한 디자인 시스템
- **React Router**: 클라이언트 사이드 라우팅
- **Axios**: API 통신
- **React Webcam**: 웹캠 인터페이스
- **react-colorful**: 색상 관련 UI 컴포넌트 