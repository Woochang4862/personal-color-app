# Task ID: 13
# Title: Implement Local Storage for Result History
# Status: pending
# Dependencies: 9
# Priority: low
# Description: Create functionality to store analysis results in the browser's local storage to allow users to view their previous results.
# Details:
1. Create a service to handle local storage operations
2. Implement functions to save, retrieve, and delete results
3. Add a history page or modal to display previous results
4. Implement UI to navigate between current and previous results

Example implementation:
```jsx
// Local Storage Service
const STORAGE_KEY = 'personal-color-history';

const historyService = {
  saveResult: (result, imageData) => {
    try {
      // Get existing history
      const history = JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];
      
      // Add new result with timestamp
      const newEntry = {
        id: Date.now(),
        date: new Date().toISOString(),
        result: result,
        image: imageData, // Consider image size limitations
      };
      
      // Limit history to 5 entries to save space
      const updatedHistory = [newEntry, ...history].slice(0, 5);
      
      localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedHistory));
      return true;
    } catch (error) {
      console.error('Error saving to local storage:', error);
      return false;
    }
  },
  
  getHistory: () => {
    try {
      return JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];
    } catch (error) {
      console.error('Error reading from local storage:', error);
      return [];
    }
  },
  
  getResultById: (id) => {
    try {
      const history = JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];
      return history.find(entry => entry.id === id) || null;
    } catch (error) {
      console.error('Error reading from local storage:', error);
      return null;
    }
  },
  
  deleteResult: (id) => {
    try {
      const history = JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];
      const updatedHistory = history.filter(entry => entry.id !== id);
      localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedHistory));
      return true;
    } catch (error) {
      console.error('Error deleting from local storage:', error);
      return false;
    }
  },
  
  clearHistory: () => {
    try {
      localStorage.removeItem(STORAGE_KEY);
      return true;
    } catch (error) {
      console.error('Error clearing local storage:', error);
      return false;
    }
  }
};

// History Component
function HistoryModal({ isOpen, onClose }) {
  const [history, setHistory] = useState([]);
  
  useEffect(() => {
    if (isOpen) {
      setHistory(historyService.getHistory());
    }
  }, [isOpen]);
  
  const handleViewResult = (id) => {
    // Navigate to result page with stored data
    navigate(`/result/history/${id}`);
    onClose();
  };
  
  const handleDeleteResult = (id) => {
    historyService.deleteResult(id);
    setHistory(history.filter(entry => entry.id !== id));
  };
  
  if (!isOpen) return null;
  
  return (
    <div className="modal-backdrop fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="modal-content bg-white rounded-lg shadow-xl p-6 max-w-md w-full max-h-[80vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-2xl font-bold">Your Analysis History</h2>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        {history.length === 0 ? (
          <p className="text-center py-8 text-gray-500">No history found</p>
        ) : (
          <div className="space-y-4">
            {history.map(entry => (
              <div key={entry.id} className="border rounded-lg p-4 flex items-center">
                <div className="w-16 h-16 bg-gray-200 rounded-md overflow-hidden mr-4">
                  {entry.image && <img src={entry.image} alt="Result" className="w-full h-full object-cover" />}
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold">{entry.result.colorType}</h3>
                  <p className="text-sm text-gray-500">
                    {new Date(entry.date).toLocaleDateString()}
                  </p>
                </div>
                <div className="flex space-x-2">
                  <button 
                    onClick={() => handleViewResult(entry.id)}
                    className="text-indigo-600 hover:text-indigo-800"
                  >
                    View
                  </button>
                  <button 
                    onClick={() => handleDeleteResult(entry.id)}
                    className="text-red-600 hover:text-red-800"
                  >
                    Delete
                  </button>
                </div>
              </div>
            ))}
            
            {history.length > 0 && (
              <button 
                onClick={() => {
                  if (window.confirm('Are you sure you want to clear all history?')) {
                    historyService.clearHistory();
                    setHistory([]);
                  }
                }}
                className="w-full py-2 text-red-600 hover:text-red-800 text-sm"
              >
                Clear All History
              </button>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
```

# Test Strategy:
1. Test saving results to local storage
2. Verify that history retrieval works correctly
3. Test the history UI with multiple saved results
4. Verify that deleting individual results works
5. Test clearing all history
6. Verify that the history is limited to the specified number of entries
7. Test with large images to ensure storage limits are handled properly
