# Task ID: 7
# Title: Implement Results Visualization Components
# Status: pending
# Dependencies: 5
# Priority: medium
# Description: Create components to display the personal color analysis results, including color type, recommended colors, and colors to avoid.
# Details:
1. Create a ColorPalette component in `/src/components/ColorPalette.jsx`:
   ```jsx
   import React from 'react';
   
   const ColorSwatch = ({ color, name }) => {
     return (
       <div className="color-swatch" style={{ backgroundColor: color }}>
         <span className="color-name">{name || color}</span>
       </div>
     );
   };
   
   const ColorPalette = ({ title, colors, className }) => {
     if (!colors || colors.length === 0) {
       return null;
     }
     
     return (
       <div className={`color-palette ${className || ''}`}>
         <h3>{title}</h3>
         <div className="swatches-container">
           {colors.map((color, index) => (
             <ColorSwatch 
               key={`${color}-${index}`} 
               color={color} 
               name={color.name} 
             />
           ))}
         </div>
       </div>
     );
   };
   
   export default ColorPalette;
   ```

2. Create a ColorTypeInfo component in `/src/components/ColorTypeInfo.jsx`:
   ```jsx
   import React from 'react';
   
   const colorTypeData = {
     'Spring Warm': {
       description: 'Spring types have warm undertones with a clear, bright quality. Your best colors are warm, clear, and bright.',
       characteristics: [
         'Golden or strawberry blonde, auburn, or light brown hair',
         'Ivory or peach skin with golden undertones',
         'Blue, green, or warm brown eyes',
         'Colors that complement you have yellow or golden undertones'
       ],
       tips: [
         'Wear warm, clear colors like coral, peach, and golden yellow',
         'Avoid dark, cool colors like navy, burgundy, and charcoal',
         'Choose gold over silver for jewelry',
         'Opt for warm-toned makeup with peach or coral undertones'
       ]
     },
     'Summer Cool': {
       description: 'Summer types have cool undertones with a soft, muted quality. Your best colors are cool, soft, and muted.',
       characteristics: [
         'Ash blonde, light to medium brown hair',
         'Pink or rosy skin with blue undertones',
         'Blue, gray, or cool brown eyes',
         'Colors that complement you have blue or pink undertones'
       ],
       tips: [
         'Wear soft, cool colors like lavender, powder blue, and rose pink',
         'Avoid bright, warm colors like orange, bright yellow, and tomato red',
         'Choose silver over gold for jewelry',
         'Opt for cool-toned makeup with pink or blue undertones'
       ]
     },
     'Fall Warm': {
       description: 'Fall types have warm undertones with a rich, muted quality. Your best colors are warm, rich, and earthy.',
       characteristics: [
         'Auburn, dark brown, or rich brown hair, often with red highlights',
         'Ivory, peach, or golden skin with warm undertones',
         'Hazel, green, or warm brown eyes',
         'Colors that complement you have golden or earthy undertones'
       ],
       tips: [
         'Wear warm, rich colors like olive green, rust, and terracotta',
         'Avoid cool, bright colors like fuchsia, icy blue, and bright white',
         'Choose gold over silver for jewelry',
         'Opt for warm-toned makeup with earthy or golden undertones'
       ]
     },
     'Winter Cool': {
       description: 'Winter types have cool undertones with a clear, bright quality. Your best colors are cool, clear, and intense.',
       characteristics: [
         'Dark brown to black hair, sometimes with blue undertones',
         'Olive, porcelain, or cool beige skin with blue undertones',
         'Dark brown, black, or clear blue eyes',
         'Colors that complement you have blue or purple undertones'
       ],
       tips: [
         'Wear cool, clear colors like royal blue, true red, and emerald green',
         'Avoid muted, warm colors like salmon, camel, and mustard yellow',
         'Choose silver over gold for jewelry',
         'Opt for cool-toned makeup with blue or purple undertones'
       ]
     }
   };
   
   const ColorTypeInfo = ({ colorType }) => {
     const typeInfo = colorTypeData[colorType] || {
       description: 'Information not available for this color type.',
       characteristics: [],
       tips: []
     };
     
     return (
       <div className="color-type-info">
         <h2>{colorType}</h2>
         <p className="type-description">{typeInfo.description}</p>
         
         {typeInfo.characteristics.length > 0 && (
           <div className="characteristics">
             <h3>Your Characteristics</h3>
             <ul>
               {typeInfo.characteristics.map((item, index) => (
                 <li key={`char-${index}`}>{item}</li>
               ))}
             </ul>
           </div>
         )}
         
         {typeInfo.tips.length > 0 && (
           <div className="tips">
             <h3>Style Tips</h3>
             <ul>
               {typeInfo.tips.map((tip, index) => (
                 <li key={`tip-${index}`}>{tip}</li>
               ))}
             </ul>
           </div>
         )}
       </div>
     );
   };
   
   export default ColorTypeInfo;
   ```

3. Create a ResultsPage component in `/src/pages/ResultsPage.jsx`:
   ```jsx
   import React, { useEffect } from 'react';
   import { useNavigate } from 'react-router-dom';
   import { useColorAnalyzer } from '../hooks/useColorAnalyzer';
   import ColorTypeInfo from '../components/ColorTypeInfo';
   import ColorPalette from '../components/ColorPalette';
   
   const ResultsPage = () => {
     const navigate = useNavigate();
     const { result, image, resetAnalysis } = useColorAnalyzer();
     
     useEffect(() => {
       // Redirect to analysis page if no results are available
       if (!result) {
         navigate('/analyze');
       }
     }, [result, navigate]);
     
     if (!result) {
       return null; // Will redirect via useEffect
     }
     
     const handleStartOver = () => {
       resetAnalysis();
       navigate('/analyze');
     };
     
     const handleDownloadResults = () => {
       // Implementation for downloading results as image or PDF
       alert('Download functionality will be implemented in a future update.');
     };
     
     const handleShare = (platform) => {
       // Implementation for social media sharing
       alert(`Sharing to ${platform} will be implemented in a future update.`);
     };
     
     return (
       <div className="results-container">
         <header className="results-header">
           <h1>Your Personal Color Analysis</h1>
         </header>
         
         <div className="results-content">
           <div className="results-summary">
             <div className="analyzed-image">
               {image && <img src={image} alt="Analyzed" />}
             </div>
             
             <div className="analysis-result">
               <h2>Your Color Season</h2>
               <div className="color-season">{result.colorType}</div>
               <div className="confidence">
                 Confidence: {Math.round(result.confidence * 100)}%
               </div>
             </div>
           </div>
           
           <ColorTypeInfo colorType={result.colorType} />
           
           <div className="color-palettes">
             <ColorPalette 
               title="Recommended Colors" 
               colors={result.recommendedColors} 
               className="recommended-palette" 
             />
             
             <ColorPalette 
               title="Colors to Avoid" 
               colors={result.avoidColors} 
               className="avoid-palette" 
             />
           </div>
           
           <div className="action-buttons">
             <button onClick={handleStartOver} className="start-over-button">
               Analyze Another Photo
             </button>
             
             <button onClick={handleDownloadResults} className="download-button">
               Download Results
             </button>
           </div>
           
           <div className="share-section">
             <h3>Share Your Results</h3>
             <div className="share-buttons">
               <button onClick={() => handleShare('facebook')} className="share-button facebook">
                 Facebook
               </button>
               <button onClick={() => handleShare('twitter')} className="share-button twitter">
                 Twitter
               </button>
               <button onClick={() => handleShare('instagram')} className="share-button instagram">
                 Instagram
               </button>
             </div>
           </div>
         </div>
       </div>
     );
   };
   
   export default ResultsPage;
   ```

# Test Strategy:
1. Test rendering of color palettes with different color sets
2. Verify that color type information is displayed correctly for each season
3. Test navigation and redirection when no results are available
4. Verify that the analyzed image is displayed correctly
5. Test the 'Start Over' functionality
6. Validate placeholder functionality for download and share features
7. Test responsive design of the results page on different screen sizes
