# Task ID: 4
# Title: Create Image Capture and Upload Components
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Develop components for capturing images via webcam and uploading existing image files, with proper guidelines for users.
# Details:
1. Install required packages:
   ```bash
   npm install react-webcam
   ```
2. Create a WebcamCapture component in `/src/components/WebcamCapture.jsx`:
   ```jsx
   import React, { useRef, useState, useCallback } from 'react';
   import Webcam from 'react-webcam';
   
   const WebcamCapture = ({ onImageCapture }) => {
     const webcamRef = useRef(null);
     const [isCameraReady, setIsCameraReady] = useState(false);
     const [error, setError] = useState(null);
     
     const capture = useCallback(() => {
       if (webcamRef.current) {
         const imageSrc = webcamRef.current.getScreenshot();
         onImageCapture(imageSrc);
       }
     }, [webcamRef, onImageCapture]);
     
     const handleUserMediaError = useCallback((error) => {
       console.error('Webcam Error:', error);
       setError('Camera access denied or not available. Please check permissions or try uploading an image instead.');
     }, []);
     
     const handleUserMedia = useCallback(() => {
       setIsCameraReady(true);
       setError(null);
     }, []);
     
     return (
       <div className="webcam-container">
         {error ? (
           <div className="error-message">{error}</div>
         ) : (
           <>
             <div className="webcam-guidelines">
               <h3>Photo Guidelines:</h3>
               <ul>
                 <li>Ensure good, natural lighting on your face</li>
                 <li>Look directly at the camera</li>
                 <li>Remove glasses and pull hair away from face</li>
                 <li>Maintain a neutral expression</li>
               </ul>
             </div>
             <Webcam
               audio={false}
               ref={webcamRef}
               screenshotFormat="image/jpeg"
               videoConstraints={{
                 width: 720,
                 height: 720,
                 facingMode: "user"
               }}
               onUserMedia={handleUserMedia}
               onUserMediaError={handleUserMediaError}
               className="webcam"
             />
             <button 
               onClick={capture} 
               disabled={!isCameraReady}
               className="capture-button"
             >
               Capture Photo
             </button>
           </>
         )}
       </div>
     );
   };
   
   export default WebcamCapture;
   ```
3. Create an ImageUpload component in `/src/components/ImageUpload.jsx`:
   ```jsx
   import React, { useState, useRef } from 'react';
   
   const ImageUpload = ({ onImageUpload }) => {
     const [dragActive, setDragActive] = useState(false);
     const [error, setError] = useState(null);
     const inputRef = useRef(null);
     
     const handleDrag = (e) => {
       e.preventDefault();
       e.stopPropagation();
       if (e.type === "dragenter" || e.type === "dragover") {
         setDragActive(true);
       } else if (e.type === "dragleave") {
         setDragActive(false);
       }
     };
     
     const handleDrop = (e) => {
       e.preventDefault();
       e.stopPropagation();
       setDragActive(false);
       if (e.dataTransfer.files && e.dataTransfer.files[0]) {
         handleFile(e.dataTransfer.files[0]);
       }
     };
     
     const handleChange = (e) => {
       e.preventDefault();
       if (e.target.files && e.target.files[0]) {
         handleFile(e.target.files[0]);
       }
     };
     
     const handleFile = (file) => {
       // Validate file type
       if (!file.type.match('image.*')) {
         setError('Please upload an image file (JPEG, PNG, etc.)');
         return;
       }
       
       // Validate file size (max 5MB)
       if (file.size > 5 * 1024 * 1024) {
         setError('Image size should be less than 5MB');
         return;
       }
       
       setError(null);
       
       // Convert to base64 for processing
       const reader = new FileReader();
       reader.onloadend = () => {
         onImageUpload(reader.result);
       };
       reader.onerror = () => {
         setError('Failed to read the image file');
       };
       reader.readAsDataURL(file);
     };
     
     const onButtonClick = () => {
       inputRef.current.click();
     };
     
     return (
       <div className="upload-container">
         <div className="upload-guidelines">
           <h3>Image Guidelines:</h3>
           <ul>
             <li>Use a clear, well-lit photo of your face</li>
             <li>Avoid heavy makeup or filters</li>
             <li>Ensure natural lighting conditions</li>
             <li>Image should be less than 5MB</li>
           </ul>
         </div>
         
         <form
           className={`upload-form ${dragActive ? 'drag-active' : ''}`}
           onDragEnter={handleDrag}
           onSubmit={(e) => e.preventDefault()}
         >
           <input
             ref={inputRef}
             type="file"
             accept="image/*"
             onChange={handleChange}
             className="input-file"
           />
           
           <div 
             className="upload-area"
             onDragEnter={handleDrag}
             onDragLeave={handleDrag}
             onDragOver={handleDrag}
             onDrop={handleDrop}
             onClick={onButtonClick}
           >
             <p>Drag and drop your image here or click to select</p>
           </div>
         </form>
         
         {error && <div className="error-message">{error}</div>}
       </div>
     );
   };
   
   export default ImageUpload;
   ```
4. Create a combined ImageInput component that allows switching between webcam and upload:
   ```jsx
   import React, { useState } from 'react';
   import WebcamCapture from './WebcamCapture';
   import ImageUpload from './ImageUpload';
   
   const ImageInput = ({ onImageSelected }) => {
     const [inputMethod, setInputMethod] = useState('webcam'); // 'webcam' or 'upload'
     
     return (
       <div className="image-input-container">
         <div className="input-method-selector">
           <button 
             className={`method-button ${inputMethod === 'webcam' ? 'active' : ''}`}
             onClick={() => setInputMethod('webcam')}
           >
             Use Webcam
           </button>
           <button 
             className={`method-button ${inputMethod === 'upload' ? 'active' : ''}`}
             onClick={() => setInputMethod('upload')}
           >
             Upload Image
           </button>
         </div>
         
         {inputMethod === 'webcam' ? (
           <WebcamCapture onImageCapture={onImageSelected} />
         ) : (
           <ImageUpload onImageUpload={onImageSelected} />
         )}
       </div>
     );
   };
   
   export default ImageInput;
   ```

# Test Strategy:
1. Test webcam component with mock MediaStream API
2. Verify image capture functionality produces correct data format
3. Test file upload component with various image types and sizes
4. Validate error handling for invalid file types and sizes
5. Test drag and drop functionality
6. Ensure proper guidelines are displayed to users
7. Verify switching between webcam and upload modes works correctly
