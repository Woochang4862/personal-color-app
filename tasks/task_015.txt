# Task ID: 15
# Title: Implement Accessibility Features
# Status: pending
# Dependencies: 3, 6, 9, 14
# Priority: medium
# Description: Enhance the application with accessibility features to ensure it is usable by people with disabilities and complies with WCAG guidelines.
# Details:
1. Add proper semantic HTML throughout the application
2. Implement keyboard navigation support
3. Add ARIA attributes where necessary
4. Ensure sufficient color contrast
5. Provide text alternatives for non-text content
6. Make focus states visible
7. Test with screen readers

Example implementation:
```jsx
// Accessible button component
function AccessibleButton({ children, onClick, disabled, className, ariaLabel }) {
  return (
    <button
      onClick={onClick}
      disabled={disabled}
      className={`focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 ${className}`}
      aria-label={ariaLabel || null}
    >
      {children}
    </button>
  );
}

// Skip to content link (for keyboard users)
function SkipToContent() {
  return (
    <a 
      href="#main-content" 
      className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-indigo-600 text-white px-4 py-2 z-50"
    >
      Skip to content
    </a>
  );
}

// Accessible form input
function AccessibleInput({ id, label, type = 'text', value, onChange, error, required }) {
  return (
    <div className="mb-4">
      <label 
        htmlFor={id} 
        className="block text-sm font-medium text-gray-700 mb-1"
      >
        {label}{required && <span className="text-red-500 ml-1" aria-hidden="true">*</span>}
      </label>
      <input
        id={id}
        type={type}
        value={value}
        onChange={onChange}
        required={required}
        aria-invalid={error ? 'true' : 'false'}
        aria-describedby={error ? `${id}-error` : null}
        className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 ${error ? 'border-red-500' : 'border-gray-300'}`}
      />
      {error && (
        <p id={`${id}-error`} className="mt-1 text-sm text-red-600">
          {error}
        </p>
      )}
    </div>
  );
}

// Accessible modal
function AccessibleModal({ isOpen, onClose, title, children }) {
  const modalRef = useRef(null);
  
  // Focus trap
  useEffect(() => {
    if (isOpen) {
      const focusableElements = modalRef.current.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );
      const firstElement = focusableElements[0];
      const lastElement = focusableElements[focusableElements.length - 1];
      
      const handleTabKey = (e) => {
        if (e.key === 'Tab') {
          if (e.shiftKey && document.activeElement === firstElement) {
            e.preventDefault();
            lastElement.focus();
          } else if (!e.shiftKey && document.activeElement === lastElement) {
            e.preventDefault();
            firstElement.focus();
          }
        } else if (e.key === 'Escape') {
          onClose();
        }
      };
      
      modalRef.current.addEventListener('keydown', handleTabKey);
      firstElement.focus();
      
      return () => {
        if (modalRef.current) {
          modalRef.current.removeEventListener('keydown', handleTabKey);
        }
      };
    }
  }, [isOpen, onClose]);
  
  if (!isOpen) return null;
  
  return (
    <div 
      className="fixed inset-0 z-50 overflow-y-auto"
      role="dialog"
      aria-modal="true"
      aria-labelledby="modal-title"
    >
      <div className="flex items-center justify-center min-h-screen p-4">
        {/* Backdrop */}
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 transition-opacity" 
          aria-hidden="true"
          onClick={onClose}
        ></div>
        
        {/* Modal content */}
        <div 
          ref={modalRef}
          className="bg-white rounded-lg shadow-xl p-6 max-w-md w-full relative z-10"
        >
          <div className="flex justify-between items-center mb-4">
            <h2 id="modal-title" className="text-xl font-bold">{title}</h2>
            <button 
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              aria-label="Close"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          {children}
        </div>
      </div>
    </div>
  );
}
```

Accessibility improvements for the application:
```jsx
// Add to App.jsx or main layout
function AppWithAccessibility() {
  return (
    <>
      <SkipToContent />
      <header>
        <Navigation />
      </header>
      <main id="main-content" tabIndex="-1">
        {/* Routes */}
      </main>
      <footer>
        {/* Footer content */}
      </footer>
    </>
  );
}

// Update Tailwind config to ensure sufficient color contrast
// tailwind.config.js
module.exports = {
  theme: {
    extend: {
      colors: {
        indigo: {
          // Ensure these colors have sufficient contrast
          600: '#4f46e5', // For primary buttons
          700: '#4338ca', // For hover states
        }
      }
    }
  },
  plugins: [
    require('@tailwindcss/forms'), // Adds better form styles with accessibility in mind
  ],
}
```

# Test Strategy:
1. Test with keyboard navigation to ensure all interactive elements are accessible
2. Verify that all images have appropriate alt text
3. Test with screen readers (VoiceOver, NVDA, etc.)
4. Verify color contrast meets WCAG AA standards
5. Test focus management in modals and other interactive components
6. Verify that form inputs have proper labels and error messages
7. Run automated accessibility tests using tools like axe-core
8. Test with different zoom levels and text sizes
