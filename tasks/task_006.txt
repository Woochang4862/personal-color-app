# Task ID: 6
# Title: Create Landing Page and User Flow
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Develop the landing page with service introduction and implement the core user flow for the application.
# Details:
1. Create a HomePage component in `/src/pages/HomePage.jsx`:
   ```jsx
   import React from 'react';
   import { Link } from 'react-router-dom';
   
   const HomePage = () => {
     return (
       <div className="home-container">
         <header className="home-header">
           <h1>Personal Color Analysis</h1>
           <p className="tagline">Discover your perfect color palette in minutes</p>
         </header>
         
         <section className="service-intro">
           <div className="intro-content">
             <h2>What is Personal Color Analysis?</h2>
             <p>
               Personal color analysis helps you identify which colors complement your natural features best.
               By analyzing your skin tone, hair color, and eye color, we can determine your seasonal color type
               and provide you with a personalized color palette that enhances your natural beauty.
             </p>
             
             <div className="color-types">
               <div className="color-type">
                 <h3>Spring Warm</h3>
                 <div className="color-sample spring"></div>
                 <p>Bright, clear colors with yellow undertones</p>
               </div>
               
               <div className="color-type">
                 <h3>Summer Cool</h3>
                 <div className="color-sample summer"></div>
                 <p>Soft, muted colors with blue undertones</p>
               </div>
               
               <div className="color-type">
                 <h3>Fall Warm</h3>
                 <div className="color-sample fall"></div>
                 <p>Rich, deep colors with yellow undertones</p>
               </div>
               
               <div className="color-type">
                 <h3>Winter Cool</h3>
                 <div className="color-sample winter"></div>
                 <p>Clear, intense colors with blue undertones</p>
               </div>
             </div>
           </div>
         </section>
         
         <section className="how-it-works">
           <h2>How It Works</h2>
           <div className="steps">
             <div className="step">
               <div className="step-number">1</div>
               <h3>Take or Upload a Photo</h3>
               <p>Use your webcam to take a photo or upload an existing one</p>
             </div>
             
             <div className="step">
               <div className="step-number">2</div>
               <h3>AI Analysis</h3>
               <p>Our AI analyzes your features to determine your color season</p>
             </div>
             
             <div className="step">
               <div className="step-number">3</div>
               <h3>Get Your Results</h3>
               <p>Receive your personal color palette and recommendations</p>
             </div>
           </div>
         </section>
         
         <div className="cta-container">
           <Link to="/analyze" className="cta-button">
             Start Your Color Analysis
           </Link>
         </div>
         
         <footer className="home-footer">
           <p>Â© 2023 Personal Color Analysis. All rights reserved.</p>
         </footer>
       </div>
     );
   };
   
   export default HomePage;
   ```

2. Create an AnalysisPage component in `/src/pages/AnalysisPage.jsx`:
   ```jsx
   import React, { useState } from 'react';
   import { useNavigate } from 'react-router-dom';
   import ImageInput from '../components/ImageInput';
   import { useColorAnalyzer } from '../hooks/useColorAnalyzer';
   
   const AnalysisPage = () => {
     const navigate = useNavigate();
     const { setImage, analyzeColor, isAnalyzing, error } = useColorAnalyzer();
     const [selectedImage, setSelectedImage] = useState(null);
     
     const handleImageSelected = (imageData) => {
       setSelectedImage(imageData);
       setImage(imageData);
     };
     
     const handleAnalysis = async () => {
       if (!selectedImage) {
         return;
       }
       
       const result = await analyzeColor(selectedImage);
       if (result) {
         navigate('/results');
       }
     };
     
     return (
       <div className="analysis-container">
         <header className="analysis-header">
           <h1>Take or Upload Your Photo</h1>
           <p>For best results, use a well-lit photo showing your face clearly</p>
         </header>
         
         <div className="analysis-content">
           <ImageInput onImageSelected={handleImageSelected} />
           
           {selectedImage && (
             <div className="selected-image-preview">
               <h3>Selected Image</h3>
               <img src={selectedImage} alt="Selected" className="preview-image" />
               
               <button 
                 onClick={handleAnalysis} 
                 disabled={isAnalyzing}
                 className="analyze-button"
               >
                 {isAnalyzing ? 'Analyzing...' : 'Analyze My Colors'}
               </button>
             </div>
           )}
           
           {isAnalyzing && (
             <div className="loading-indicator">
               <div className="spinner"></div>
               <p>Analyzing your colors... This may take a moment</p>
             </div>
           )}
           
           {error && (
             <div className="error-message">
               <p>Error: {error}</p>
               <p>Please try again or use a different photo.</p>
             </div>
           )}
         </div>
       </div>
     );
   };
   
   export default AnalysisPage;
   ```

# Test Strategy:
1. Test navigation between pages
2. Verify that all UI elements render correctly
3. Test responsive design on different screen sizes
4. Ensure proper loading states are displayed during analysis
5. Validate error handling and error message display
6. Test image preview functionality
7. Verify that the CTA buttons work correctly
