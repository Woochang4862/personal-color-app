# Task ID: 11
# Title: Implement Result Download Functionality
# Status: pending
# Dependencies: 9
# Priority: low
# Description: Create functionality to allow users to download their personal color analysis results as an image.
# Details:
1. Install html2canvas: `npm install html2canvas`
2. Create a function to capture the results as an image
3. Implement download button
4. Design a visually appealing downloadable result card
5. Include all relevant color information in the download

Example implementation:
```jsx
import { useRef } from 'react';
import html2canvas from 'html2canvas';

function ResultDownload({ result }) {
  const resultCardRef = useRef(null);
  
  const handleDownload = async () => {
    if (!resultCardRef.current) return;
    
    try {
      // Add a class to optimize for download
      resultCardRef.current.classList.add('downloading');
      
      const canvas = await html2canvas(resultCardRef.current, {
        scale: 2, // Higher resolution
        logging: false,
        useCORS: true,
      });
      
      // Remove the download class
      resultCardRef.current.classList.remove('downloading');
      
      const image = canvas.toDataURL('image/png');
      
      const link = document.createElement('a');
      link.href = image;
      link.download = `my-personal-color-${result.colorType.toLowerCase().replace(' ', '-')}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('Error generating image:', error);
      alert('Failed to download image. Please try again.');
    }
  };
  
  return (
    <div className="download-container">
      <div className="result-card-for-download" ref={resultCardRef}>
        <div className="p-6 bg-white rounded-lg shadow-lg">
          <div className="text-center mb-4">
            <h2 className="text-2xl font-bold">My Personal Color</h2>
            <div className="text-3xl font-bold mt-2 text-indigo-600">{result.colorType}</div>
          </div>
          
          <div className="grid grid-cols-2 gap-4 mb-4">
            <div>
              <h3 className="font-semibold mb-2">Recommended Colors</h3>
              <div className="color-grid grid grid-cols-4 gap-1">
                {result.recommendedColors.slice(0, 8).map((color, index) => (
                  <div 
                    key={index} 
                    className="color-swatch h-8 rounded-sm" 
                    style={{ backgroundColor: color }}
                  ></div>
                ))}
              </div>
            </div>
            
            <div>
              <h3 className="font-semibold mb-2">Colors to Avoid</h3>
              <div className="color-grid grid grid-cols-4 gap-1">
                {result.avoidColors.slice(0, 8).map((color, index) => (
                  <div 
                    key={index} 
                    className="color-swatch h-8 rounded-sm" 
                    style={{ backgroundColor: color }}
                  ></div>
                ))}
              </div>
            </div>
          </div>
          
          <div className="characteristics text-sm">
            <h3 className="font-semibold mb-1">Characteristics:</h3>
            <ul className="list-disc pl-5">
              {result.characteristics.slice(0, 3).map((char, index) => (
                <li key={index}>{char}</li>
              ))}
            </ul>
          </div>
          
          <div className="text-center text-xs text-gray-500 mt-4">
            Generated by Personal Color Analysis App
          </div>
        </div>
      </div>
      
      <button 
        onClick={handleDownload}
        className="mt-4 bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition flex items-center justify-center mx-auto"
      >
        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
        </svg>
        Download Result
      </button>
    </div>
  );
}
```

# Test Strategy:
1. Test the download functionality on different browsers
2. Verify that the downloaded image contains all relevant information
3. Test with different result data
4. Verify image quality and resolution
5. Test error handling when download fails
6. Verify that the download works on both mobile and desktop devices
